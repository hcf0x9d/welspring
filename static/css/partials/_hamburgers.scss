@charset "UTF-8";
// Hamburgers
// @description Tasty CSS-animated hamburgers
// @author Jonathan Suh @jonsuh
// @site https: //jonsuh.com/hamburgers
// @link https://github.com/jonsuh/hamburgers

// Settings
// ==================================================
$hamburger-padding-x:0 !default;
$hamburger-padding-y: 0 !default;
$hamburger-layer-width: 30px !default;
$hamburger-layer-height: 2px !default;
$hamburger-layer-spacing: 6px !default;
$hamburger-layer-color: #FFF !default;
$hamburger-layer-border-radius: 4px !default;
$hamburger-hover-opacity: 0.7 !default;
$hamburger-hover-transition-duration: 0.15s !default;
$hamburger-hover-transition-timing-function: linear !default;
// To use CSS filters as the hover effect instead of opacity, // set $hamburger-hover-use-filter as true and
// change the value of $hamburger-hover-filter accordingly.
$hamburger-hover-use-filter: false !default;
$hamburger-hover-filter: opacity(50%) !default;
// Types (Remove or comment out what you donâ€™t need)
// ==================================================
$hamburger-types: (spin) !default;

// Base Hamburger (We need this)
// ==================================================
// Hamburger
// ==================================================
.hamburger {
  background-color: transparent;
  border: 0;
  color: inherit;
  cursor: pointer;
  display: inline-block;
  // Normalize (<button>)
  font: inherit;
  margin: 0;
  outline: none;
  overflow: visible;
  padding: $hamburger-padding-y $hamburger-padding-x;
  text-transform: none;
  transition-duration: $hamburger-hover-transition-duration;
  transition-property: opacity, filter;
  transition-timing-function: $hamburger-hover-transition-timing-function;

  &:hover {

    @if $hamburger-hover-use-filter == true {
      filter: $hamburger-hover-filter;
    }

    @else {
      opacity: $hamburger-hover-opacity;
    }
  }
}
.hamburger-box {
  display: inline-block;
  // height: $hamburger-layer-height * 3 + $hamburger-layer-spacing * 2;
  height: 12px;
  position: relative;
  width: $hamburger-layer-width;
}
.hamburger-inner {
  display: block;
  margin-top: $hamburger-layer-height / -2;
  top: 50%;

  &, &::before, &::after {
    background-color: $hamburger-layer-color;
    border-radius: $hamburger-layer-border-radius;
    height: $hamburger-layer-height;
    position: absolute;
    transition-duration: 0.15s;
    transition-property: transform;
    transition-timing-function: ease;
    width: $hamburger-layer-width;
  }
  &::before, &::after {
    content: "";
    display: block;
  }
  &::before {
    top: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
  }
  &::after {
    bottom: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
  }
}
// Hamburger types
// ==================================================

/*
 * Spin
 */
.hamburger--spin {
  .hamburger-inner {
    transition-duration: 0.3s;
    transition-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);

    &::before {
      transition: top 0.1s 0.34s ease-in, opacity 0.1s ease-in;
    }
    &::after {
      transition: bottom 0.1s 0.34s ease-in, transform 0.3s cubic-bezier(0.55, 0.055, 0.675, 0.19);
    }
  }
  &.is-active {
    .hamburger-inner {
      transform: rotate(225deg);
      transition-delay: 0.14s;
      transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);

      &::before {
        opacity: 0;
        top: 0;
        transition: top 0.1s ease-out, opacity 0.1s 0.14s ease-out;
      }
      &::after {
        bottom: 0;
        transform: rotate(-90deg);
        transition: bottom 0.1s ease-out, transform 0.3s 0.14s cubic-bezier(0.215, 0.61, 0.355, 1);
      }
    }
  }
}